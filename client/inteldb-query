#!/usr/bin/env python3
##################################################
# Client for IntelDB


import re
import sys
import json
import datetime
import argparse
import requests
import configobj

TYPES = {}
INTELDB_URL = None

def query(rtype, jquery, regex=False, links=False, details=False, rjson=False, ojson=False):
    '''Handle queries to DB'''

    if regex:
        r = requests.post(
            INTELDB_URL + "/search",
                data = {'type': rtype,
                    'query': json.dumps(jquery),
                    'json':True,
                    'regex': True
                    })
    else:
        r = requests.post(
            INTELDB_URL + "/search",
                data = {
                    'type': rtype,
                    'query': json.dumps(jquery),
                    'json': True
                   })

    if rjson:
        return r.json()

    return parse_hioc(rtype, r.json()['results'], links, details, ojson)



def add(jquery, ojson=False):
    ''' Add indicator to db'''
    r = requests.post(INTELDB_URL + "/add", data=jquery)

    if (r.json()['ecode'] == 0):
        parse_hioc(jquery['type'], r.json()['result'], ojson=ojson)
        return True

    print("Error: %s" % r.json()['errors'])
    return False

def connect(jquery, ojson=False):
    r = requests.post(INTELDB_URL + "/link", data=jquery)

    if (r.json()['code'] == True):
        print(r.text)
    else:
        print("Error: %s" % r.text)

def get_mid(rtype, name):
    res = query(rtype, {'name': name}, False, False, False, True)
    try:
        return res['results'][0]['_id']['$oid']
    except Exception as e:
        print("Error get_mid(): %s" % e)
        sys.exit(1)


def links_query(mid):
    r = requests.post(INTELDB_URL + "/lsearch", data = {'id': mid})
    try:
        results = r.json()
        if results.get('code', False):
            # Valid results returned
            return results.get("results", [])

        print("Error searching for links: %s" % results.get("error", "UNKN"))
        return []
    except Exception as e:
        print("Links Query Exception: %s" % e)
        return []

def parse_hioc(rtype, qu_results, links=False, details=False, ojson=False):
    if ojson:
        print(json.dumps(qu_results))
        return True

    for jresult in qu_results:
        print("[%s] %s\n\tAdded: %s\n\tNotes:" % (
            rtype, 
            jresult['name'], 
            datetime.datetime.fromtimestamp(int(jresult['added'])).strftime('%Y-%m-%d %H:%M:%S')))

        for note in jresult['note']:
            if note == "":
                continue
            print("\t\t[+] %s" % note)

        if details:
            print("-----Details-----")
            for prop in jresult.get('details', {}):
                print("\t%s: %s" % (prop, jresult['details'][prop]))


        if links:
            jlinks = links_query(jresult['_id']['$oid'])
            print("\n\n\n-----Links-----")
            for link in jlinks:
                print("Note: %s" % link[2])
                if (jresult['_id']['$oid'] == link[1]):
                    query(link[3], {'_id' : link[4]})
                else:
                    query(link[0], {'_id' : link[1]})

    return 0


def parse_args():
    global TYPES
    parser = argparse.ArgumentParser(description='IntelDB Client')

    parser.add_argument('-q','--query', help='Search', required=False, action='store_true')
    parser.add_argument('-o','--searchNotes', help='Search', required=False, action='store_true')

    parser.add_argument('-a','--add', help='Add', required=False, action='store_true')
    parser.add_argument('-c','--connect', help='connect two indicators', required=False, action='store_true')

    parser.add_argument('-un','--untype', help='Unknown Type', required=False)


    for key, value in TYPES.iteritems():
        parser.add_argument('-'  + value['cli_args'][1],      '--' + value['cli_args'][0] , help=value['cli_description'], required=False)
        parser.add_argument('-l' + value['cli_link_args'][1], '--' + value['cli_link_args'][0] , help="Connect Dest" + value['cli_link_description'], required=False)


    parser.add_argument('-x','--regex', help='Search is a regex', required=False, action='store_true')
    parser.add_argument('-r','--raw', help='Search is a raw json query', required=False, action='store_true')

    parser.add_argument('-l','--links', help='Include all sample links', required=False, action='store_true')
    parser.add_argument('-s','--show_details', help='Include all sample details', required=False, action='store_true')

    parser.add_argument('-n','--note', help='Description of IoC', required=False)
    parser.add_argument('-z','--details', help='Optional JSON description', required=False)
    parser.add_argument('-t','--timestamp', help='Optional JSON description', required=False)

    parser.add_argument('-j','--outjson', help='JSON output', required=False, action='store_true')

    args = parser.parse_args()

    if qtype(vars(args)) == -1:
        parser.print_help()

    return vars(args)

def qtype(args):
    global TYPES

    if args['untype']:
        is_ip = re.match("^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$", args['untype'])
        if is_ip:
            args['ipaddress'] = args['untype']
        is_domain = re.match("^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\-]*[A-Za-z0-9])$", args['untype'])
        if is_domain:
            args['domain'] = args['untype']


    for t in args:
        if t in TYPES and args[t] is not None:
            return t
    return -1

def ltype(args):
    global TYPES
    for t in args:
        for key, rtype in TYPES.iteritems():
            if t == rtype['cli_link_args'][0] and args[t] is not None:
                return key, t
    return -1, -1

def parse_config():
    global TYPES, INTELDB_URL
    try:
        config = configobj.ConfigObj('/home/silas/.local/etc/inteldb/config.ini')
        TYPES = config['types']
        INTELDB_URL = config['SERVER']
    except Exception as e:
        print("Bad Config: Reverting to default: %s" % e)
        default_config()

def default_config():
    global TYPES, INTELDB_URL
    INTELDB_URL = "http://127.0.0.1:8080"
    TYPES = {
        'file': {
            'dbname': 'file', 
            'cli_args': ['file', 'f'], 
            'cli_description': 'Object is a File', 'cli_link_args': ['file2', 'f2'], 
            'cli_link_description': 'Object is a File'}, 
        'domain': {
            'dbname': 'domain', 
            'cli_args': ['domain', 'd'], 
            'cli_description': 'Object is a Domain', 
            'cli_link_args': ['domain2', 'd2'], 
            'cli_link_description': 'Object is a Domain'}, 
        'ipaddress': {
            'dbname': 'ipaddress', 
            'cli_args': ['ip', 'i'], 
            'cli_description': 'Object is an IP Address', 
            'cli_link_args': ['ip2', 'i2'], 
            'cli_link_description': 'Object is an IP Address'}, 
        'investigation': {
            'dbname': 'investigation', 
            'cli_args': ['investigation', 'inv'], 
            'cli_description': 'Object is an Investigation', 
            'cli_link_args': ['investigation2', 'inv2'], 
            'cli_link_description': 'Object is an Investigation'}, 
        'code': {
            'dbname': 'code', 
            'cli_args': ['code', 'co'], 
            'cli_description': 'Object is Code related', 'cli_link_args': ['code2', 'co2'], 
            'cli_link_description': 'Object is Code related'}
        }

def main():
    args = parse_args()
    rtype = qtype(args)

    if args['query']:
        if args['outjson'] == False:
            print("Query -> Type: %s: %s" % (rtype, args[rtype].lower()))
        if args['raw']:
            query(
                rtype, 
                json.loads(args[rtype].lower().replace("'", "\"")), 
                args['regex'], 
                args['links'], 
                args['show_details'], 
                ojson=args['outjson'])
        else:
                query(
                    rtype, 
                    {
                        'name': args[rtype].lower()
                    }, 
                    args['regex'], 
                    args['links'], 
                    args['show_details'], 
                    ojson=args['outjson'])

    elif args['searchNotes']:
        if args['outjson'] == False:
            print("Query Notes -> Type: %s: %s" % (rtype, args[rtype]))
        query(rtype, {'note': args[rtype]}, True, args['links'], args['show_details'], ojson=args['outjson'])

    elif args['add']:
        details = {}
        if (args['details']):
            try:
                details = json.loads(args['details'].replace("'", "\""))
            except Exception as e:
                print("Details Error: %s" % e)
                return -1
        if (args['note'] is not None):
            note = args['note']

            add(
                {
                    'type' : rtype, 
                    'indicator' : args[rtype].lower(), 
                    'note' : note, 
                    'details' : json.dumps(details), 
                    'timestamp' : args['timestamp']
                }, 
                ojson=args['outjson'])

        elif args['connect'] is not None:
            note = " "

            basetype, argtype = ltype(args)

            if args['note'] is not None:
                note = args['note']

            if rtype != -1 and basetype != -1 and argtype != -1:
                connect(
                    {
                        'source': get_mid(rtype, args[rtype].lower()), 
                        'stype': rtype, 
                        'note': note, 
                        'dest': get_mid(basetype, args[argtype].lower()), 
                        'dtype': basetype
                    }, 
                    ojson=args['outjson'])

if __name__ == "__main__":
    parse_config()
    main()






